---
globs: '*.ts,*.tsx'
---

# TypeScript & React 代码规范

## TypeScript 最佳实践

### 类型定义

```typescript
// ✅ 优选：使用 interface 定义对象类型
interface VideoMetadata {
  duration: number;
  resolution: { width: number; height: number };
  format: 'mp4' | 'webm' | 'avi';
}

// ✅ 组件 Props 必须明确类型
interface VideoPlayerProps {
  src: string;
  metadata?: VideoMetadata;
  onError?: (error: Error) => void;
}
```

### 函数与组件声明

```typescript
// ✅ 函数组件：使用箭头函数 + 类型推断
const VideoPlayer = ({ src, metadata, onError }: VideoPlayerProps) => {
  // 组件逻辑
};

// ✅ 工具函数：明确返回类型
const parseVideoMetadata = (file: File): Promise<VideoMetadata> => {
  // 实现逻辑
};
```

## React 组件规范

### 组件结构顺序

```typescript
// 1. 导入语句
import React from 'react';
import { useState } from 'react';

// 2. 类型定义
interface Props {
  // props 定义
}

// 3. 组件主体
const Component = (props: Props) => {
  // 3.1 hooks（状态管理）
  const [loading, setLoading] = useState(false);

  // 3.2 事件处理函数
  const handleSubmit = async () => {
    try {
      setLoading(true);
      // 处理逻辑
    } catch (error) {
      // 错误处理
    } finally {
      setLoading(false);
    }
  };

  // 3.3 JSX 返回
  return <div>{/* 组件内容 */}</div>;
};
```

### 错误处理规范

```typescript
// ✅ 必须：异步操作使用 try-catch
const processVideo = async (videoFile: File) => {
  try {
    setProcessing(true);
    const result = await aiVideoProcessor.process(videoFile);
    return result;
  } catch (error) {
    console.error('Video processing failed:', error);
    setError(error instanceof Error ? error.message : '处理失败');
    throw error;
  } finally {
    setProcessing(false);
  }
};
```

### JSDoc 注释规范

```typescript
/**
 * AI 视频处理组件
 * @param src - 视频文件源地址
 * @param options - 处理选项配置
 * @returns 处理后的视频组件
 */
const AIVideoProcessor = ({ src, options }: AIVideoProcessorProps) => {
  // 组件实现
};
```

## 禁止事项

- ❌ 禁用 `any` 类型（除非明确必要）
- ❌ 禁用 `innerHTML`（XSS 安全风险）
- ❌ 禁止在组件内直接定义复杂对象（影响性能）
- ❌ 禁止忽略 Promise rejection（必须处理错误）

## Next.js 特定规范

- 使用 `export default` 导出页面组件
- 服务端组件优先，客户端组件需明确标识 `'use client'`
- 图片使用 `next/image` 组件，字体使用 `next/font`
