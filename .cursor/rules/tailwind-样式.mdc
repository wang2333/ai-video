---
globs: '*.tsx,*.ts'
description: 'Tailwind CSS v4 样式规范与最佳实践'
---

# Tailwind CSS v4 样式规范

## 样式组织原则

### CSS 变量与主题配置

```css
/* globals.css - 主题变量定义 */
@theme {
  --color-primary: #3b82f6;
  --color-secondary: #6366f1;
  --font-geist-sans: var(--font-geist-sans);
  --font-geist-mono: var(--font-geist-mono);
}
```

### 响应式设计优先

```typescript
// ✅ 移动端优先的响应式设计
const VideoCard = () => (
  <div
    className='
    w-full                    /* 移动端全宽 */
    p-4                       /* 基础内边距 */
    sm:w-1/2                  /* 平板半宽 */
    sm:p-6                    /* 平板增大内边距 */
    lg:w-1/3                  /* 桌面1/3宽 */
    lg:p-8                    /* 桌面最大内边距 */
    bg-white
    rounded-lg
    shadow-sm
    hover:shadow-md
    transition-shadow
    duration-200
  '
  >
    {/* 视频卡片内容 */}
  </div>
);
```

## 组件样式模式

### 条件样式处理

```typescript
import { cn } from '@/lib/utils'; // tailwind-merge + clsx

// ✅ 使用 cn 工具函数处理条件样式
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
}

const Button = ({ variant = 'primary', size = 'md', disabled, ...props }: ButtonProps) => {
  return (
    <button
      className={cn(
        // 基础样式
        'font-medium rounded-lg transition-colors duration-200',
        'focus:outline-none focus:ring-2 focus:ring-offset-2',

        // 尺寸变体
        {
          'px-3 py-2 text-sm': size === 'sm',
          'px-4 py-2 text-base': size === 'md',
          'px-6 py-3 text-lg': size === 'lg'
        },

        // 颜色变体
        {
          'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500': variant === 'primary',
          'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500': variant === 'secondary',
          'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500': variant === 'danger'
        },

        // 禁用状态
        disabled && 'opacity-50 cursor-not-allowed hover:bg-current'
      )}
      disabled={disabled}
      {...props}
    />
  );
};
```

### 复杂布局组件

```typescript
// ✅ 视频播放器布局组件
const VideoPlayer = ({ src, title, description }: VideoPlayerProps) => (
  <div
    className='
    relative                  /* 相对定位容器 */
    aspect-video             /* 16:9 宽高比 */
    bg-black                 /* 背景黑色 */
    rounded-lg               /* 圆角 */
    overflow-hidden          /* 隐藏溢出 */
    group                    /* 组hover状态 */
  '
  >
    <video className='w-full h-full object-cover' src={src} controls />

    {/* 视频信息遮罩 */}
    <div
      className='
      absolute
      inset-0
      bg-gradient-to-t
      from-black/60
      to-transparent
      opacity-0
      group-hover:opacity-100
      transition-opacity
      duration-300
      flex
      flex-col
      justify-end
      p-6
    '
    >
      <h3 className='text-white font-semibold text-lg mb-2'>{title}</h3>
      <p className='text-white/80 text-sm'>{description}</p>
    </div>
  </div>
);
```

## 动画与交互

### 微交互动画

```typescript
// ✅ 上传进度条组件
const UploadProgress = ({ progress }: { progress: number }) => (
  <div className='w-full bg-gray-200 rounded-full h-2 overflow-hidden'>
    <div
      className='
        h-full
        bg-blue-600
        rounded-full
        transition-all
        duration-300
        ease-out
        relative
        overflow-hidden
      '
      style={{ width: `${progress}%` }}
    >
      {/* 动态光效 */}
      <div
        className='
        absolute
        inset-0
        bg-gradient-to-r
        from-transparent
        via-white/20
        to-transparent
        animate-pulse
      '
      />
    </div>
  </div>
);
```

### 状态指示器

```typescript
// ✅ 处理状态指示
const ProcessingStatus = ({ status }: { status: 'idle' | 'processing' | 'success' | 'error' }) => {
  const statusConfig = {
    idle: {
      className: 'bg-gray-100 text-gray-800',
      text: '待处理'
    },
    processing: {
      className: 'bg-blue-100 text-blue-800 animate-pulse',
      text: '处理中'
    },
    success: {
      className: 'bg-green-100 text-green-800',
      text: '处理完成'
    },
    error: {
      className: 'bg-red-100 text-red-800',
      text: '处理失败'
    }
  };

  const config = statusConfig[status];

  return (
    <span
      className={cn(
        'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
        config.className
      )}
    >
      {config.text}
    </span>
  );
};
```

## 可访问性考虑

### 色彩对比与焦点管理

```typescript
// ✅ 可访问的表单组件
const FormInput = ({ label, error, ...props }: FormInputProps) => (
  <div className='space-y-2'>
    <label
      className='
      block
      text-sm
      font-medium
      text-gray-700
      dark:text-gray-300
    '
    >
      {label}
    </label>

    <input
      className={cn(
        // 基础样式
        'w-full px-3 py-2 border rounded-md shadow-sm',
        'focus:outline-none focus:ring-2 focus:ring-offset-2',
        'transition-colors duration-200',

        // 正常状态
        'border-gray-300 focus:border-blue-500 focus:ring-blue-500',

        // 错误状态
        error && 'border-red-500 focus:border-red-500 focus:ring-red-500',

        // 暗色模式
        'dark:border-gray-600 dark:bg-gray-700 dark:text-white'
      )}
      {...props}
    />

    {error && <p className='text-sm text-red-600 dark:text-red-400'>{error}</p>}
  </div>
);
```

## 性能优化

### 避免样式冲突

```typescript
// ❌ 避免：重复或冲突的样式
<div className="p-4 padding-4 px-6"> {/* px-6 覆盖 p-4 的水平padding */}

// ✅ 推荐：使用 cn 工具函数
<div className={cn('p-4', someCondition && 'px-6')}>
```

### 减少不必要的样式

```typescript
// ❌ 避免：过度具体的样式
<div className="w-full h-full flex flex-col justify-center items-center text-center font-semibold text-lg text-gray-800 bg-white rounded-lg shadow-lg p-8 m-4">

// ✅ 推荐：抽象为组件类
const CenteredCard = ({ children, className }: CenteredCardProps) => (
  <div className={cn(
    'card-centered', // 在 globals.css 中定义
    className
  )}>
    {children}
  </div>
);
```

## 暗色模式支持

```typescript
// ✅ 系统化的暗色模式
const ThemeAwareComponent = () => (
  <div
    className='
    bg-white dark:bg-gray-900
    text-gray-900 dark:text-gray-100
    border-gray-200 dark:border-gray-700
    shadow-lg dark:shadow-gray-900/20
  '
  >
    {/* 组件内容 */}
  </div>
);
```
